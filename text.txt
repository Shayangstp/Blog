





/**
 * @jest-environment node
 */
import { createMocks } from "node-mocks-http";
import { GET, PUT, DELETE } from "../../src/app/api/posts/[id]/route";
import startDb from "../../src/lib/db";
import BlogPostModel from "../../src/models/blogModel";
import { NextResponse } from "next/server";

jest.mock("../../src/lib/db");
jest.mock("../../src/models/blogModel", () => ({
  findById: jest.fn(),
  findByIdAndUpdate: jest.fn(),
  findByIdAndDelete: jest.fn(),
}));
jest.mock("next/server", () => ({
  NextResponse: {
    json: jest.fn((data, init) => ({ data, ...init })),
  },
}));

describe("API /api/posts/[id]", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test("GET /api/posts/[id] should return a specific blog post", async () => {
    const mockPost = { _id: "1", title: "Test Post", content: "Content" };
    BlogPostModel.findById.mockResolvedValue(mockPost);

    const { req, res } = createMocks({ method: "GET", query: { id: "1" } });
    await GET(req, res);

    expect(res._getStatusCode()).toBe(200);
    expect(JSON.parse(res._getData())).toEqual(mockPost);
  });

  test("PUT /api/posts/[id] should update a blog post", async () => {
    const updatedPost = { title: "Updated Title", content: "Updated Content" };
    BlogPostModel.findByIdAndUpdate.mockResolvedValue({ _id: "1", ...updatedPost });

    const { req, res } = createMocks({
      method: "PUT",
      query: { id: "1" },
      body: JSON.stringify(updatedPost),
    });
    await PUT(req, res);

    expect(res._getStatusCode()).toBe(200);
    expect(JSON.parse(res._getData())).toEqual({ _id: "1", ...updatedPost });
  });

  test("DELETE /api/posts/[id] should delete a blog post", async () => {
    // Mock the response of the model method
    BlogPostModel.findByIdAndDelete.mockResolvedValue({ _id: "1" });

    // Create the mock request and response
    const { req, res } = createMocks({
      method: "DELETE",
      query: { id: "1" },
    });

    // Invoke the DELETE function
    await DELETE(req, res);

    // Check the response status and body
    expect(res._getStatusCode()).toBe(200);
    const responseData = res._getData();
    expect(responseData).toBeTruthy(); // Ensure the response data is not empty
    expect(JSON.parse(responseData)).toEqual({ message: "Blog post deleted successfully" });
  });
});
